name: MLOps CI/CD Pipeline - Face Mask Detection (Phase 3)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1

    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install opencv-python-headless  # Use headless version for CI
        pip install pytest flake8
        # Install requirements, but skip opencv-python if present (use headless instead)
        grep -v opencv-python requirements.txt > temp_requirements.txt || cp requirements.txt temp_requirements.txt
        pip install -r temp_requirements.txt

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=face_mask_detection_venv
        # Treat all other issues as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=face_mask_detection_venv

    - name: Test with pytest
      run: |
        # Set Python path to include src directory
        export PYTHONPATH="${PYTHONPATH}:${PWD}/src:${PWD}"
        pytest tests/ -v

  build-docker:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Build Docker Image
      run: |
        docker build -t face-mask-detection:latest .
    
    - name: Test Docker Container
      run: |
        # Start container in background
        docker run -d -p 8000:8000 --name test-container face-mask-detection:latest
        sleep 15
        # Test if container is healthy (allow some startup time)
        for i in {1..5}; do
          if curl -f http://localhost:8000/; then
            echo "Container is healthy"
            break
          fi
          echo "Attempt $i failed, retrying..."
          sleep 5
        done
        # Clean up
        docker stop test-container
        docker rm test-container

  model-validation:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tensorflow opencv-python-headless numpy
    
    - name: Validate Model Files
      run: |
        python -c "
        import os
        import tensorflow as tf
        
        # Check if model files exist
        model_path = 'models/mask_detector.h5'
        if os.path.exists(model_path):
            try:
                model = tf.keras.models.load_model(model_path)
                print(f'‚úÖ Model loaded successfully: {model_path}')
                print(f'Model input shape: {model.input_shape}')
                print(f'Model output shape: {model.output_shape}')
            except Exception as e:
                print(f'‚ùå Error loading model: {e}')
                exit(1)
        else:
            print('‚ö†Ô∏è Model file not found, skipping validation')
        "

  security-scan:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    - name: Install bandit for security scanning
      run: |
        pip install bandit
    
    - name: Run security scan
      run: |
        bandit -r src/ app/ --exclude tests/ --format json -o bandit-report.json || true
        bandit -r src/ app/ --exclude tests/

  notify:
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-docker, model-validation, security-scan]
    if: always()
    
    steps:
    - name: Notify Results
      run: |
        if [[ "${{ needs.lint-and-test.result }}" == "success" && "${{ needs.security-scan.result }}" == "success" ]]; then
          echo "‚úÖ All CI/CD checks passed successfully!"
          echo "üöÄ Ready for deployment to production"
        else
          echo "‚ùå CI/CD pipeline failed"
          echo "Please check the logs and fix the issues"
          exit 1
        fi
